

import java.sql.Time;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import projection.DaoException;
import projection.DaoFilm;
import projection.DaoPlanning;
import projection.DaoProjection;
import projection.DaoSalle;
import projection.Film;
import projection.Planning;
import projection.Projection;
import projection.Salle;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aïssa
 */
public class GenererP extends javax.swing.JFrame {

    static final long ONE_MINUTE_IN_MILLIS=60000;//millisecs
    /**
     * Creates new form GenererP
     */
    
    String planning;
    public GenererP(String planning) throws DaoException {
        this.planning=planning;
        initComponents();
        this.setLocationRelativeTo(null);
        jLabel3.setVisible(false);
        jSpinner1.setEnabled(false);
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        DaoFilm daof = DaoFilm.getDAO();
        Collection <Film> col = new ArrayList();
        col = daof.filmAPlacerParCategorie(planning, ">0");
        
        for (Film f : col) {
                model.addRow(new Object[]{f.getTitre(),f.getDuree()});
            }
        
        DaoSalle daoS = DaoSalle.getDAO();
        Collection<Salle> col2 = new ArrayList();
        col2 = daoS.salleParConcours(planning);
        
        for (Salle s : col2) {
            jComboBox3.addItem(s.getNom());
        }
    }

    private GenererP() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b1 = new javax.swing.JLabel();
        b2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox3 = new javax.swing.JComboBox();
        jSpinner1 = new javax.swing.JSpinner();
        jComboBox1 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        close = new javax.swing.JLabel();
        reduce = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        b1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/valider_default.png"))); // NOI18N
        b1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                b1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                b1MouseExited(evt);
            }
        });
        getContentPane().add(b1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 410, 160, 50));

        b2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/retour_default.png"))); // NOI18N
        b2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                b2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                b2MouseExited(evt);
            }
        });
        getContentPane().add(b2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 410, 40, 50));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 260, 200, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 340, 200, 20));

        jLabel1.setText("Préférence horaire:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 178, -1, -1));

        jLabel5.setText("Salle:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 130, -1, -1));

        jButton1.setText("Insérer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(497, 283, 90, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 210, 220));

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 126, -1, -1));

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel());
        getContentPane().add(jSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(567, 220, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucune", "Matinée", "Après-midi", "Soirée" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 174, -1, -1));

        jCheckBox1.setText("Séance(s) presse");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 224, -1, -1));

        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fermer_default.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeMouseExited(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(762, 5, 20, 20));

        reduce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reduire2_default.png"))); // NOI18N
        reduce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reduceMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reduceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                reduceMouseExited(evt);
            }
        });
        getContentPane().add(reduce, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, 20, 20));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/GenererP.png"))); // NOI18N
        jLabel2.setMinimumSize(new java.awt.Dimension(791, 578));
        jLabel2.setPreferredSize(new java.awt.Dimension(790, 560));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeMouseClicked

    private void closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseEntered
        ImageIcon II = new ImageIcon(getClass().getResource("Images/fermer_hover.png"));
        close.setIcon(II);
    }//GEN-LAST:event_closeMouseEntered

    private void closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseExited
        ImageIcon II = new ImageIcon(getClass().getResource("Images/fermer_default.png"));
        close.setIcon(II);
    }//GEN-LAST:event_closeMouseExited

    private void reduceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reduceMouseClicked
        this.setState(1);
    }//GEN-LAST:event_reduceMouseClicked

    private void reduceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reduceMouseEntered
        ImageIcon II = new ImageIcon(getClass().getResource("Images/reduire2_hover.png"));
        reduce.setIcon(II);
    }//GEN-LAST:event_reduceMouseEntered

    private void reduceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reduceMouseExited
        ImageIcon II = new ImageIcon(getClass().getResource("Images/reduire2_default.png"));
        reduce.setIcon(II);
    }//GEN-LAST:event_reduceMouseExited

    //Bouton VALIDER
    private void b1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b1MouseClicked
        
        
        
        //Création du planning
                
                Planning p = new Planning(jComboBox1.getSelectedItem().toString());
                try {
                DaoPlanning daoP = DaoPlanning.getDAO();
                
                //Si le planning n'existe pas, on le crée
                if(!daoP.PlanningExiste2(this.planning)){
                    daoP.create(p);
                }
                
                } catch (DaoException ex) {
                Logger.getLogger(Creer.class.getName()).log(Level.SEVERE, null, ex);
                }
        
    }//GEN-LAST:event_b1MouseClicked

    private static boolean isInteger(String s) {
       boolean isValid = true;
       try{ Integer.parseInt(s); }
       catch(NumberFormatException nfe){ isValid = false; }
       return isValid;
   }
    
    private void b1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b1MouseEntered
        ImageIcon II = new ImageIcon(getClass().getResource("Images/valider_hover.png"));
        b1.setIcon(II);
    }//GEN-LAST:event_b1MouseEntered

    private void b1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b1MouseExited
        ImageIcon II = new ImageIcon(getClass().getResource("Images/valider_default.png"));
        b1.setIcon(II);
    }//GEN-LAST:event_b1MouseExited

    //Bouton retour
    private void b2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b2MouseClicked
        Creer c = null;
        try {
            c = new Creer();
        } catch (DaoException ex) {
            Logger.getLogger(GenererP.class.getName()).log(Level.SEVERE, null, ex);
        }
        c.setVisible(rootPaneCheckingEnabled);
        this.dispose();
    }//GEN-LAST:event_b2MouseClicked

    private void b2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b2MouseEntered
        ImageIcon II = new ImageIcon(getClass().getResource("Images/retour_hover.png"));
        b2.setIcon(II);
    }//GEN-LAST:event_b2MouseEntered

    private void b2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b2MouseExited
        ImageIcon II = new ImageIcon(getClass().getResource("Images/retour_default.png"));
        b2.setIcon(II);
    }//GEN-LAST:event_b2MouseExited

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            jSpinner1.setEnabled(true);
        }
        
        else {
            jSpinner1.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        //Récuperer la date sélectionner et proposer des créneaux selon celle-ci
        /*String date = dateChooserCombo1.getText();
        String mois = date.substring(3, 5);
        String jour = date.substring(0,2);
        String date_sql= "2015-" +mois+ "-" +jour;*/
        //Proposer dans créneau selon la salle,la date sélectionnée et la durée du film

       /* try {
            DaoProjection daoP = DaoProjection.getDAO();
            Collection <Projection> col;
            col = new ArrayList();
            col = daoP.ProjectionsDuJour(date_sql, jComboBox3.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString());
            afficherCreneaux(date_sql,col,jComboBox2.getSelectedItem().toString());
        } catch (DaoException ex) {
            Logger.getLogger(InsererF.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_jComboBox3ActionPerformed

    //Bouton insérer
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Verifie qu'un seul film est sélectionné
        System.out.println("1");
        if(jTable1.getSelectedRowCount()<1) {
            jLabel3.setText("Merci de sélectionner un film");
            jLabel3.setVisible(true);
        }
        
        else if(jTable1.getSelectedRowCount()>=2) {
            jLabel3.setText("Merci de sélectionner un seul film");
            jLabel3.setVisible(true);
        }
            //Fin des tests d'entrés
            
            else try{
                System.out.println("2");
                
                int ligne = jTable1.getSelectedRow();
                String film_choisi = jTable1.getValueAt(ligne, 0).toString();
                DaoFilm dF = null;
                dF = DaoFilm.getDAO();
                
                if(dF.dejaPlace(film_choisi)) {
                jLabel3.setText("Ce film a déjà été placé");
                jLabel3.setVisible(true);
                }
                
                
                else {
                    //Création du planning
                Planning pl = new Planning(this.planning);
                try {
                DaoPlanning daoP = DaoPlanning.getDAO();
                daoP.create(pl);
                } catch (DaoException ex) {
                Logger.getLogger(Creer.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                //Début des insertions
                DaoFilm daoF = null;
                try {
                    daoF = DaoFilm.getDAO();
                    
                } catch (DaoException ex) {
                    Logger.getLogger(GenererP.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                String salle = jComboBox3.getSelectedItem().toString();
                
                if (jCheckBox1.isSelected()) {
                    String nb_seance_presse = jSpinner1.getValue().toString();
                    if (!isInteger(nb_seance_presse)) {
                        jLabel4.setText("Veuillez entrer un nombre entier");
                    }
                    else {
                        int nb_seances = Integer.parseInt(nb_seance_presse);
                        
                        //Début de l'algorithme pour placer le film
                        Collection<String> col_heure = new ArrayList();
                        
                        //ON PLACE ICI LA PROJECTION OFFICIELLE DU FILM//
                        
                        DaoProjection daoP;
                        try {
                            daoP = DaoProjection.getDAO();
                            String date = hasardDate();
                            Collection <Projection> col;
                            col = new ArrayList();
                            col = daoP.ProjectionsDuJour(date, jComboBox3.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString());
                            String preference = jComboBox1.getSelectedItem().toString();
                            System.out.println("Ligne 420");
                            //Test des contraintes de nombres de film par jour
                            if (daoF.testNbFilmParJour(film_choisi, date)) {
                                
                                
                                int indiceTab = 0;
                                Projection[] tab_proj = new Projection[15];
                                
                                for (Projection p : col) {
                                    tab_proj[indiceTab] = p;
                                    indiceTab++;
                                }
                                
                                indiceTab=0;
                                
                                System.out.println(col.size());
                                //Si il y a au moins une projection dejà prevue ce jour la
                                if (col.size()>0) {
                                    
                                    while(indiceTab<14) {
                                        
                                        Time debut_creneau_libre = null;
                                        Time fin_creneau_libre = null;
                                        Time heure_possible;
                                        
                                        Time fin_default = null;
                                        Time debut_default = null;
                                        
                                        Calendar cal_possible=Calendar.getInstance();
                                        Calendar cal_debut = Calendar.getInstance();
                                        Calendar cal_fin = Calendar.getInstance();
                                        
                                        
                                        //Toute la journée
                                        if (preference.equals("Aucune")){
                                            debut_default=Time.valueOf("09:00:00");
                                            fin_default=Time.valueOf("23:00:00");
                                        }
                                        
                                        
                                        //Matinée
                                        else if (preference.equals("Matinée")) {
                                            debut_default=Time.valueOf("09:00:00");
                                            fin_default=Time.valueOf("12:00:00");
                                            
                                        }
                                        
                                        //Après-midi
                                        else if (preference.equals("Après_midi")) {
                                            debut_default=Time.valueOf("13:00:00");
                                            fin_default=Time.valueOf("19:00:00");
                                            
                                        }
                                        
                                        //Soirée
                                        else if (preference.equals("Soirée")) {
                                            debut_default=Time.valueOf("19:00:00");
                                            fin_default=Time.valueOf("23:00:00");
                                            
                                        }
                                        
                                        
                                        //Si c'est le premier creneau on verifie si il est à la première heure ou non
                                        if (indiceTab==0) {
                                            if(!tab_proj[indiceTab].getHeure().equals(debut_default)) {
                                                debut_creneau_libre=debut_default;
                                            }
                                            else {
                                                debut_creneau_libre=HeureFin(tab_proj[indiceTab]);
                                            }
                                        }
                                        
                                        else {
                                            debut_creneau_libre=HeureFin(tab_proj[indiceTab-1]);
                                            
                                            if(tab_proj[indiceTab]==null) {
                                                fin_creneau_libre=fin_default;
                                                System.out.println("Ligne 497");
                                            }
                                            
                                            //Si c'était la dernière projection
                                            else{
                                                fin_creneau_libre = Time.valueOf(tab_proj[indiceTab].getHeure());
                                                indiceTab=14;
                                                System.out.println("Ligne 504");
                                            }
                                        }
                                        
                                        cal_debut.setTime(debut_creneau_libre);
                                        cal_fin.setTime(fin_creneau_libre);
                                        int duree_creneau = Math.round(Math.abs((cal_debut.getTimeInMillis()- cal_fin.getTimeInMillis())/ONE_MINUTE_IN_MILLIS));
                                        
                                        int i = 0;
                                        //Tant que l'on peut encore placer le film au moins une fois dans le créneau
                                        //Ici, i nous donnera le nombre de fois que l'on peut placer le film dans le créneau
                                        while (duree_creneau>daoF.dureeFilm(daoF.idFilm(film_choisi))) {
                                            duree_creneau = duree_creneau - daoF.dureeFilm(daoF.idFilm(film_choisi));
                                            i++;
                                        }
                                        
                                        heure_possible = debut_creneau_libre;
                                        cal_possible.setTime(heure_possible);
                                        
                                        //Ajout à la jTable des créneaux possibles
                                        for ( int j=0; j<i;j++) {
                                            col_heure.add(cal_debut.getTime().toString().substring(11, 16));
                                            cal_debut.add(Calendar.MINUTE, daoF.dureeFilm(daoF.idFilm(film_choisi))); //Ajout duree
                                        }
                                        
                                        String heure_de_la_projection = null;
                                        
                                        int le_premier_creneau = 0;
                                        while (le_premier_creneau==0) {
                                            for (String str : col_heure) {
                                                heure_de_la_projection = str;
                                            }
                                            le_premier_creneau++;
                                        }
                                        
                                        //Insertion de la projection officielle
                                        daoP.insérerProjection("Officielle", salle, date, heure_de_la_projection, film_choisi);
                                        
                                        indiceTab++;
                                    }
                                }
                                
                                
                                //Si il n'y a pas de projections prévues ce jour là
                                else {
                                    
                                    Time debut_creneau_libre = null;
                                    Time fin_creneau_libre = null;
                                    Time heure_possible;
                                    Calendar cal_possible=Calendar.getInstance();
                                    Calendar cal_debut = Calendar.getInstance();
                                    Calendar cal_fin = Calendar.getInstance();
                                    
                                    if (preference.equals("Aucune")) {
                                        debut_creneau_libre= Time.valueOf("09:00:00");
                                        fin_creneau_libre=Time.valueOf("23:00:00");
                                    }
                                    
                                    else if (preference.equals("Matinée")) {
                                        debut_creneau_libre= Time.valueOf("09:00:00");
                                        fin_creneau_libre=Time.valueOf("12:00:00");
                                    }
                                    
                                    else if (preference.equals("Après-midi")) {
                                        debut_creneau_libre= Time.valueOf("13:00:00");
                                        fin_creneau_libre=Time.valueOf("19:00:00");
                                    }
                                    
                                    else if (preference.equals("Soirée")) {
                                        debut_creneau_libre= Time.valueOf("19:00:00");
                                        fin_creneau_libre=Time.valueOf("23:00:00");
                                    }
                                    
                                    cal_debut.setTime(debut_creneau_libre);
                                    cal_fin.setTime(fin_creneau_libre);
                                    int duree_creneau = Math.round(Math.abs((cal_debut.getTimeInMillis()- cal_fin.getTimeInMillis())/ONE_MINUTE_IN_MILLIS));
                                    
                                    System.out.println("debut_creneau =" + debut_creneau_libre);
                                    System.out.println("fin_creneau =" + fin_creneau_libre);
                                    System.out.println("duree_creneau =" + duree_creneau);
                                    
                                    int i = 0;
                                    //Tant que l'on peut encore placer le film au moins une fois dans le créneau
                                    //Ici, i nous donnera le nombre de fois que l'on peut placer le film dans le créneau
                                    while (duree_creneau>daoF.dureeFilm(daoF.idFilm(film_choisi))) {
                                        duree_creneau = duree_creneau - daoF.dureeFilm(daoF.idFilm(film_choisi));
                                        i++;
                                    }
                                    System.out.println("i = " +i);
                                    
                                    heure_possible = debut_creneau_libre;
                                    cal_possible.setTime(heure_possible);
                                    
                                    //Ajout à la jTable des créneaux possibles
                                    for ( int j=0; j<i;j++) {
                                        col_heure.add(cal_debut.getTime().toString().substring(11, 16));
                                        cal_debut.add(Calendar.MINUTE, daoF.dureeFilm(daoF.idFilm(film_choisi)));
                                    }
                                    
                                    String heure_de_la_projection = null;
                                    
                                    int le_premier_creneau = 0;
                                    while (le_premier_creneau==0) {
                                        for (String str : col_heure) {
                                            heure_de_la_projection = str;
                                        }
                                        le_premier_creneau++;
                                    }
                                    
                                    //Insertion de la projection officielle
                                    daoP.insérerProjection("Officielle", salle, date, heure_de_la_projection, film_choisi);
                                    
                                    
                                }
                            }
                        } catch (DaoException ex) {
                            Logger.getLogger(GenererP.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        
                        //---------------------------------------------------------------------------------------------------
                        //---------------------------------------------------------------------------------------------------
                        
                        int compteur_presse = 1;
                        while (compteur_presse<=nb_seances) {
                            
                            
                            //Début de l'algorithme pour placer le film
                            col_heure = new ArrayList();
                            
                            //ON PLACE ICI LES SEANCES DE PRESSE//
                            
                            
                            try {
                                daoP = DaoProjection.getDAO();
                                String date = hasardDate();
                                Collection <Projection> col;
                                col = new ArrayList();
                                col = daoP.ProjectionsDuJour(date, jComboBox3.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString());
                                String preference = jComboBox1.getSelectedItem().toString();
                                //Test des contraintes de nombres de film par jour
                                if (daoF.testNbFilmParJour(film_choisi, date)) {
                                    
                                    
                                    int indiceTab = 0;
                                    Projection[] tab_proj = new Projection[15];
                                    
                                    for (Projection p : col) {
                                        tab_proj[indiceTab] = p;
                                        indiceTab++;
                                    }
                                    
                                    indiceTab=0;
                                    
                                    System.out.println(col.size());
                                    //Si il y a au moins une projection dejà prevue ce jour la
                                    if (col.size()>0) {
                                        
                                        while(indiceTab<14) {
                                            
                                            Time debut_creneau_libre = null;
                                            Time fin_creneau_libre = null;
                                            Time heure_possible;
                                            
                                            Time fin_default = null;
                                            Time debut_default = null;
                                            
                                            Calendar cal_possible=Calendar.getInstance();
                                            Calendar cal_debut = Calendar.getInstance();
                                            Calendar cal_fin = Calendar.getInstance();
                                            
                                            
                                            //Toute la journée
                                            if (preference.equals("Aucune")){
                                                debut_default=Time.valueOf("09:00:00");
                                                fin_default=Time.valueOf("23:00:00");
                                            }
                                            
                                            
                                            //Matinée
                                            else if (preference.equals("Matinée")) {
                                                debut_default=Time.valueOf("09:00:00");
                                                fin_default=Time.valueOf("12:00:00");
                                                
                                            }
                                            
                                            //Après-midi
                                            else if (preference.equals("Après_midi")) {
                                                debut_default=Time.valueOf("13:00:00");
                                                fin_default=Time.valueOf("19:00:00");
                                                
                                            }
                                            
                                            //Soirée
                                            else if (preference.equals("Soirée")) {
                                                debut_default=Time.valueOf("19:00:00");
                                                fin_default=Time.valueOf("23:00:00");
                                                
                                            }
                                            
                                            
                                            //Si c'est le premier creneau on verifie si il est à la première heure ou non
                                            if (indiceTab==0) {
                                                if(!tab_proj[indiceTab].getHeure().equals(debut_default)) {
                                                    debut_creneau_libre=debut_default;
                                                }
                                                else {
                                                    debut_creneau_libre=HeureFin(tab_proj[indiceTab]);
                                                }
                                            }
                                            
                                            else {
                                                debut_creneau_libre=HeureFin(tab_proj[indiceTab-1]);
                                                
                                                if(tab_proj[indiceTab]==null) {
                                                    fin_creneau_libre=fin_default;
                                                }
                                                
                                                //Si c'était la dernière projection
                                                else{
                                                    fin_creneau_libre = Time.valueOf(tab_proj[indiceTab].getHeure());
                                                    indiceTab=14;
                                                }
                                            }
                                            
                                            cal_debut.setTime(debut_creneau_libre);
                                            cal_fin.setTime(fin_creneau_libre);
                                            int duree_creneau = Math.round(Math.abs((cal_debut.getTimeInMillis()- cal_fin.getTimeInMillis())/ONE_MINUTE_IN_MILLIS));
                                            
                                            int i = 0;
                                            //Tant que l'on peut encore placer le film au moins une fois dans le créneau
                                            //Ici, i nous donnera le nombre de fois que l'on peut placer le film dans le créneau
                                            while (duree_creneau>daoF.dureeFilm(daoF.idFilm(film_choisi))) {
                                                duree_creneau = duree_creneau - daoF.dureeFilm(daoF.idFilm(film_choisi));
                                                i++;
                                            }
                                            
                                            heure_possible = debut_creneau_libre;
                                            cal_possible.setTime(heure_possible);
                                            
                                            //Ajout à la jTable des créneaux possibles
                                            for ( int j=0; j<i;j++) {
                                                col_heure.add(cal_debut.getTime().toString().substring(11, 16));
                                                cal_debut.add(Calendar.MINUTE, daoF.dureeFilm(daoF.idFilm(film_choisi))); //Ajout duree
                                            }
                                            
                                            String heure_de_la_projection = null;
                                            
                                            int le_premier_creneau = 0;
                                            while (le_premier_creneau==0) {
                                                for (String str : col_heure) {
                                                    heure_de_la_projection = str;
                                                }
                                                le_premier_creneau++;
                                            }
                                            
                                            String nouvelle_date = date.substring(8, 10);
                                            int lendemain = Integer.parseInt(nouvelle_date) + 1;
                                            nouvelle_date = "2015-05-"+Integer.toString(lendemain);
                                            date=nouvelle_date;
                                            
                                            //Insertion de la projection officielle
                                            daoP.insérerProjection("Presse", salle, date, heure_de_la_projection, film_choisi);
                                            
                                            indiceTab++;
                                        }
                                    }
                                    
                                    
                                    //Si il n'y a pas de projections prévues ce jour là
                                    else {
                                        
                                        Time debut_creneau_libre = null;
                                        Time fin_creneau_libre = null;
                                        Time heure_possible;
                                        Calendar cal_possible=Calendar.getInstance();
                                        Calendar cal_debut = Calendar.getInstance();
                                        Calendar cal_fin = Calendar.getInstance();
                                        
                                        if (preference.equals("Aucune")) {
                                            debut_creneau_libre= Time.valueOf("09:00:00");
                                            fin_creneau_libre=Time.valueOf("23:00:00");
                                        }
                                        
                                        else if (preference.equals("Matinée")) {
                                            debut_creneau_libre= Time.valueOf("09:00:00");
                                            fin_creneau_libre=Time.valueOf("12:00:00");
                                        }
                                        
                                        else if (preference.equals("Après-midi")) {
                                            debut_creneau_libre= Time.valueOf("13:00:00");
                                            fin_creneau_libre=Time.valueOf("19:00:00");
                                        }
                                        
                                        else if (preference.equals("Soirée")) {
                                            debut_creneau_libre= Time.valueOf("19:00:00");
                                            fin_creneau_libre=Time.valueOf("23:00:00");
                                        }
                                        
                                        cal_debut.setTime(debut_creneau_libre);
                                        cal_fin.setTime(fin_creneau_libre);
                                        int duree_creneau = Math.round(Math.abs((cal_debut.getTimeInMillis()- cal_fin.getTimeInMillis())/ONE_MINUTE_IN_MILLIS));
                                        
                                        System.out.println("debut_creneau =" + debut_creneau_libre);
                                        System.out.println("fin_creneau =" + fin_creneau_libre);
                                        System.out.println("duree_creneau =" + duree_creneau);
                                        
                                        int i = 0;
                                        //Tant que l'on peut encore placer le film au moins une fois dans le créneau
                                        //Ici, i nous donnera le nombre de fois que l'on peut placer le film dans le créneau
                                        while (duree_creneau>daoF.dureeFilm(daoF.idFilm(film_choisi))) {
                                            duree_creneau = duree_creneau - daoF.dureeFilm(daoF.idFilm(film_choisi));
                                            i++;
                                        }
                                        System.out.println("i = " +i);
                                        
                                        heure_possible = debut_creneau_libre;
                                        cal_possible.setTime(heure_possible);
                                        
                                        //Ajout à la jTable des créneaux possibles
                                        for ( int j=0; j<i;j++) {
                                            col_heure.add(cal_debut.getTime().toString().substring(11, 16));
                                            cal_debut.add(Calendar.MINUTE, daoF.dureeFilm(daoF.idFilm(film_choisi)));
                                        }
                                        
                                        String heure_de_la_projection = null;
                                        
                                        int le_premier_creneau = 0;
                                        while (le_premier_creneau==0) {
                                            for (String str : col_heure) {
                                                heure_de_la_projection = str;
                                            }
                                            le_premier_creneau++;
                                        }
                                        
                                        String nouvelle_date = date.substring(8, 10);
                                        int lendemain = Integer.parseInt(nouvelle_date) + 1;
                                        nouvelle_date = "2015-05-"+Integer.toString(lendemain);
                                        date=nouvelle_date;
                                        
                                        //Insertion de la projection officielle
                                        daoP.insérerProjection("Presse", salle, date, heure_de_la_projection, film_choisi);
                                        
                                        
                                    }
                                }
                            } catch (DaoException ex) {
                                Logger.getLogger(GenererP.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                            
                           compteur_presse++; 
                        }
                        
                    }
                }
                
                else {
                    //Début de l'algorithme pour placer le film
                        Collection<String> col_heure = new ArrayList();
                        
                        //ON PLACE ICI LA PROJECTION OFFICIELLE DU FILM//
                        
                        DaoProjection daoP;
                        try {
                            daoP = DaoProjection.getDAO();
                            String date = hasardDate();
                            Collection <Projection> col;
                            col = new ArrayList();
                            col = daoP.ProjectionsDuJour(date, jComboBox3.getSelectedItem().toString(), jComboBox1.getSelectedItem().toString());
                            String preference = jComboBox1.getSelectedItem().toString();
                            System.out.println("Ligne 420");
                            //Test des contraintes de nombres de film par jour
                            if (daoF.testNbFilmParJour(film_choisi, date)) {
                                
                                
                                int indiceTab = 0;
                                Projection[] tab_proj = new Projection[15];
                                
                                for (Projection p : col) {
                                    tab_proj[indiceTab] = p;
                                    indiceTab++;
                                }
                                
                                indiceTab=0;
                                
                                System.out.println(col.size());
                                //Si il y a au moins une projection dejà prevue ce jour la
                                if (col.size()>0) {
                                    
                                    while(indiceTab<14) {
                                        
                                        Time debut_creneau_libre = null;
                                        Time fin_creneau_libre = null;
                                        Time heure_possible;
                                        
                                        Time fin_default = null;
                                        Time debut_default = null;
                                        
                                        Calendar cal_possible=Calendar.getInstance();
                                        Calendar cal_debut = Calendar.getInstance();
                                        Calendar cal_fin = Calendar.getInstance();
                                        
                                        
                                        //Toute la journée
                                        if (preference.equals("Aucune")){
                                            debut_default=Time.valueOf("09:00:00");
                                            fin_default=Time.valueOf("23:00:00");
                                        }
                                        
                                        
                                        //Matinée
                                        else if (preference.equals("Matinée")) {
                                            debut_default=Time.valueOf("09:00:00");
                                            fin_default=Time.valueOf("12:00:00");
                                            
                                        }
                                        
                                        //Après-midi
                                        else if (preference.equals("Après_midi")) {
                                            debut_default=Time.valueOf("13:00:00");
                                            fin_default=Time.valueOf("19:00:00");
                                            
                                        }
                                        
                                        //Soirée
                                        else if (preference.equals("Soirée")) {
                                            debut_default=Time.valueOf("19:00:00");
                                            fin_default=Time.valueOf("23:00:00");
                                            
                                        }
                                        
                                        
                                        //Si c'est le premier creneau on verifie si il est à la première heure ou non
                                        if (indiceTab==0) {
                                            if(!tab_proj[indiceTab].getHeure().equals(debut_default)) {
                                                debut_creneau_libre=debut_default;
                                            }
                                            else {
                                                debut_creneau_libre=HeureFin(tab_proj[indiceTab]);
                                            }
                                        }
                                        
                                        else {
                                            debut_creneau_libre=HeureFin(tab_proj[indiceTab-1]);
                                            
                                            if(tab_proj[indiceTab]==null) {
                                                fin_creneau_libre=fin_default;
                                            }
                                            
                                            //Si c'était la dernière projection
                                            else{
                                                fin_creneau_libre = Time.valueOf(tab_proj[indiceTab].getHeure());
                                                indiceTab=14;
                                            }
                                        }
                                        
                                        cal_debut.setTime(debut_creneau_libre);
                                        cal_fin.setTime(fin_creneau_libre);
                                        int duree_creneau = Math.round(Math.abs((cal_debut.getTimeInMillis()- cal_fin.getTimeInMillis())/ONE_MINUTE_IN_MILLIS));
                                        
                                        int i = 0;
                                        //Tant que l'on peut encore placer le film au moins une fois dans le créneau
                                        //Ici, i nous donnera le nombre de fois que l'on peut placer le film dans le créneau
                                        while (duree_creneau>daoF.dureeFilm(daoF.idFilm(film_choisi))) {
                                            duree_creneau = duree_creneau - daoF.dureeFilm(daoF.idFilm(film_choisi));
                                            i++;
                                        }
                                        
                                        heure_possible = debut_creneau_libre;
                                        cal_possible.setTime(heure_possible);
                                        
                                        //Ajout à la jTable des créneaux possibles
                                        for ( int j=0; j<i;j++) {
                                            col_heure.add(cal_debut.getTime().toString().substring(11, 16));
                                            cal_debut.add(Calendar.MINUTE, daoF.dureeFilm(daoF.idFilm(film_choisi))); //Ajout duree
                                        }
                                        
                                        String heure_de_la_projection = null;
                                        
                                        int le_premier_creneau = 0;
                                        while (le_premier_creneau==0) {
                                            for (String str : col_heure) {
                                                heure_de_la_projection = str;
                                            }
                                            le_premier_creneau++;
                                        }
                                        
                                        //Insertion de la projection officielle
                                        daoP.insérerProjection("Officielle", salle, date, heure_de_la_projection, film_choisi);
                                        
                                        indiceTab++;
                                    }
                                }
                                
                                
                                //Si il n'y a pas de projections prévues ce jour là
                                else {
                                    
                                    Time debut_creneau_libre = null;
                                    Time fin_creneau_libre = null;
                                    Time heure_possible;
                                    Calendar cal_possible=Calendar.getInstance();
                                    Calendar cal_debut = Calendar.getInstance();
                                    Calendar cal_fin = Calendar.getInstance();
                                    
                                    if (preference.equals("Aucune")) {
                                        debut_creneau_libre= Time.valueOf("09:00:00");
                                        fin_creneau_libre=Time.valueOf("23:00:00");
                                    }
                                    
                                    else if (preference.equals("Matinée")) {
                                        debut_creneau_libre= Time.valueOf("09:00:00");
                                        fin_creneau_libre=Time.valueOf("12:00:00");
                                    }
                                    
                                    else if (preference.equals("Après-midi")) {
                                        debut_creneau_libre= Time.valueOf("13:00:00");
                                        fin_creneau_libre=Time.valueOf("19:00:00");
                                    }
                                    
                                    else if (preference.equals("Soirée")) {
                                        debut_creneau_libre= Time.valueOf("19:00:00");
                                        fin_creneau_libre=Time.valueOf("23:00:00");
                                    }
                                    
                                    cal_debut.setTime(debut_creneau_libre);
                                    cal_fin.setTime(fin_creneau_libre);
                                    int duree_creneau = Math.round(Math.abs((cal_debut.getTimeInMillis()- cal_fin.getTimeInMillis())/ONE_MINUTE_IN_MILLIS));
                                    
                                    System.out.println("debut_creneau =" + debut_creneau_libre);
                                    System.out.println("fin_creneau =" + fin_creneau_libre);
                                    System.out.println("duree_creneau =" + duree_creneau);
                                    
                                    int i = 0;
                                    //Tant que l'on peut encore placer le film au moins une fois dans le créneau
                                    //Ici, i nous donnera le nombre de fois que l'on peut placer le film dans le créneau
                                    while (duree_creneau>daoF.dureeFilm(daoF.idFilm(film_choisi))) {
                                        duree_creneau = duree_creneau - daoF.dureeFilm(daoF.idFilm(film_choisi));
                                        i++;
                                    }
                                    System.out.println("i = " +i);
                                    
                                    heure_possible = debut_creneau_libre;
                                    cal_possible.setTime(heure_possible);
                                    
                                    //Ajout à la jTable des créneaux possibles
                                    for ( int j=0; j<i;j++) {
                                        col_heure.add(cal_debut.getTime().toString().substring(11, 16));
                                        cal_debut.add(Calendar.MINUTE, daoF.dureeFilm(daoF.idFilm(film_choisi)));
                                    }
                                    
                                    String heure_de_la_projection = null;
                                    
                                    int le_premier_creneau = 0;
                                    while (le_premier_creneau==0) {
                                        for (String str : col_heure) {
                                            heure_de_la_projection = str;
                                        }
                                        le_premier_creneau++;
                                    }
                                    
                                    //Insertion de la projection officielle
                                    daoP.insérerProjection("Officielle", salle, date, heure_de_la_projection, film_choisi);
                                    
                                    
                                }
                            }
                        } catch (DaoException ex) {
                            Logger.getLogger(GenererP.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
                }
                
            
    
        }catch (DaoException ex) {
            Logger.getLogger(GenererP.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        
    }//GEN-LAST:event_jButton1ActionPerformed
        
    
    
    //Retourne l'heure de fin d'une projection
    public Time HeureFin(Projection p) {
        Time t = Time.valueOf(p.getHeure());
        Calendar cal = Calendar.getInstance();
        cal.setTime(t);
        cal.add(Calendar.MINUTE, p.getDuree());
        Time t1 = Time.valueOf(cal.getTime().toString().substring(11, 19));
        return t1;
    }    
        
    public String hasardDate() {
        Random r = new Random();
        int valeur = 15 + r.nextInt(22 - 15);
        String date = "2015-05-"+Integer.toString(valeur);
        return date;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenererP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenererP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenererP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenererP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenererP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel b1;
    private javax.swing.JLabel b2;
    private javax.swing.JLabel close;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel reduce;
    // End of variables declaration//GEN-END:variables
}
